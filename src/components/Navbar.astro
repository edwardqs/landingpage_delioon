---
// src/components/Navbar.astro
const { pathname } = Astro.url;

const navLinks = [
    { href: "/", label: "Inicio" },
    { href: "/productos", label: "Productos" },
    { href: "/servicios", label: "Servicios" },
    { href: "/contacto", label: "Contacto" }
];
---

<style>
    .link-active {
        color: #DE1207; /* delion-red */
        border-color: #DE1207; /* delion-red */
    }
</style>

<nav id="main-navbar" class="w-full bg-gradient-to-r from-[#0A192F] to-[#4d0b1a] text-white py-3 z-40 transition-colors duration-300">
    <div class="max-w-7xl w-11/12 mx-auto flex justify-between items-center">
        
        <div>
            <a href="/" class="block h-10 w-35 transition-transform duration-300 hover:scale-105">
                <img src="/logo_delion.png" alt="Logo Delion blanco" class="h-full w-full object-cover" />
            </a>
        </div>

        <div class="hidden md:flex items-center gap-x-8">
            <ul class="flex items-center gap-x-8">
                {navLinks.map(link => (
                    <li>
                        <a 
                            href={link.href} 
                            class:list={[
                                "text-base pb-1.5 border-b-2 transition-colors duration-300",
                                pathname === link.href || (link.href !== "/" && pathname.startsWith(link.href))
                                    ? "border-delion-red text-white font-semibold"
                                    : "border-transparent hover:border-white/50"
                            ]}
                        >
                            {link.label}
                        </a>
                    </li>
                ))}
            </ul>
            <div class="relative">
                <button id="lang-toggle-button" class="flex items-center gap-2.5 text-base text-white transition-opacity">
                    <img id="current-lang-flag" src="/icons/Spain (ES).svg" alt="Bandera de España" class="h-5 w-5 object-contain rounded-full" />
                    <span id="current-lang-text">ESP</span>
                    <svg id="chevron-icon" xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transition-transform duration-300"><path d="m6 9 6 6 6-6"/></svg>
                </button>
                <div id="lang-menu" class="absolute top-full mt-3 right-0 w-48 bg-white rounded-md shadow-lg hidden z-10">
                    <div class="py-1" role="menu">
                         <a href="/es" class="lang-option flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem" data-lang="ESP" data-flag="/icons/Spain (ES).svg">
                            <img src="/icons/Spain (ES).svg" alt="Bandera de España" class="h-5 w-5 object-contain rounded-full">
                            <span>Español (ES)</span>
                         </a>
                         <a href="/en" class="lang-option flex items-center gap-3 px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem" data-lang="ENG" data-flag="/icons/English (EN).svg">
                             <img src="/icons/English (EN).svg" alt="Bandera de Reino Unido" class="h-5 w-5 object-contain rounded-full">
                             <span>English (EN)</span>
                         </a>
                    </div>
                </div>
            </div>
        </div>

         <div class="md:hidden">
            <button id="hamburger-button" class="text-white z-50 relative">
                <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="4" x2="20" y1="12" y2="12"/><line x1="4" x2="20" y1="6" y2="6"/><line x1="4" x2="20" y1="18" y2="18"/></svg>
            </button>
        </div>
    </div>
</nav>

<div id="mobile-menu" class="fixed inset-0 bg-[#0A192F] text-white hidden z-40">
    <div class="flex flex-col items-center justify-center h-full">
        <button id="close-mobile-menu" class="absolute top-6 right-6 text-white text-2xl hover:text-gray-300">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
        </button>
        <nav>
            <ul class="flex flex-col items-center gap-y-8 text-2xl">
                 {navLinks.map(link => (
                    <li>
                        <a href={link.href} class="hover:text-gray-300">{link.label}</a>
                    </li>
                ))}
            </ul>
        </nav>
    </div>
</div>

<script>
    // El script permanece sin cambios
    document.addEventListener('DOMContentLoaded', () => {
        const langToggleButton = document.getElementById('lang-toggle-button');
        const langMenu = document.getElementById('lang-menu');
        const currentLangFlag = document.getElementById('current-lang-flag');
        const currentLangText = document.getElementById('current-lang-text');
        const chevronIcon = document.getElementById('chevron-icon');
        const langOptions = document.querySelectorAll('.lang-option');

        if (langToggleButton && langMenu) {
            langToggleButton.addEventListener('click', (event) => {
                event.stopPropagation();
                langMenu.classList.toggle('hidden');
                if (chevronIcon) chevronIcon.classList.toggle('rotate-180');
            });

            langOptions.forEach(option => {
                option.addEventListener('click', (event) => {
                    event.preventDefault(); 
                    const newLang = (event.currentTarget as HTMLElement).dataset.lang;
                    const newFlag = (event.currentTarget as HTMLElement).dataset.flag;
        
                    if (currentLangFlag && currentLangText) {
                        (currentLangFlag as HTMLImageElement).src = newFlag || '';
                        currentLangText.textContent = newLang || '';
                    }
      
                    langMenu.classList.add('hidden');
                    if (chevronIcon) chevronIcon.classList.remove('rotate-180');
                });
            });
        }

        const hamburgerButton = document.getElementById('hamburger-button');
        const mobileMenu = document.getElementById('mobile-menu');
        const closeMobileMenuButton = document.getElementById('close-mobile-menu');

        if (hamburgerButton && mobileMenu) {
            hamburgerButton.addEventListener('click', () => {
                mobileMenu.classList.remove('hidden');
                document.body.classList.add('overflow-hidden');
            });
        }

        if (closeMobileMenuButton && mobileMenu) {
            closeMobileMenuButton.addEventListener('click', () => {
                mobileMenu.classList.add('hidden');
                document.body.classList.remove('overflow-hidden');
            });
        }

        if (mobileMenu) {
            const mobileMenuLinks = mobileMenu.querySelectorAll('a');
            mobileMenuLinks.forEach(link => {
                link.addEventListener('click', () => {
                    mobileMenu.classList.add('hidden');
                    document.body.classList.remove('overflow-hidden');
                });
            });
        }
    });

    document.addEventListener('click', () => {
        const langMenu = document.getElementById('lang-menu');
        const chevronIcon = document.getElementById('chevron-icon');
        if (langMenu && !langMenu.classList.contains('hidden')) {
            langMenu.classList.add('hidden');
            if (chevronIcon) chevronIcon.classList.remove('rotate-180');
        }
    });
</script>